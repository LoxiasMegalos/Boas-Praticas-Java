Padrão de projeto:

- Solução comum para um problema recorrente em POO
- Padrão estrutural para lidar com problemas de design da codificação em projetos

23 padrões de projetos - 3 categorias
- criacionais: padrões na criação de objetos
- estruturais: estrtura e composição no relacionamento de classes
- comportamentais: comportamentos, estado e interação entre objetos

Padrões comportamentais mais comuns estudados para serem utilizados no dia a dia

Projeto Loja e Orçamento

Funcionalidade de cálculo de impostos
	- Nova classe de calculo de impostos
	- recebe um orçamento e devolve a quantidade de imposto em um valor BigDecimal
	- toda a vez que um novo imposto surgir ou uma nova regra for adicionada -> classe crescerá indefinidamente

Varias classes com o mesmo metodos mais diferentes implementações -> Interface
	- Ao realizar o calculo, passar o orçamento e a classe do imposto que deseja que seja calculado
	- Método Strategy - utilização do polimorfismo por meio de classes ou interfaces para aumentar a coesão, eliminar a necessidade de if & else, isolando as implementações de cada regra de negócio

Chain Responsibility - Implementação do cálculo de descontos para o cliente
	- Desconto baseado no numero de itens comprados
	- A cada nova regra de desconto um novo if deverá ser adicionado na Calculadora de descontos 
	- Nesse caso a ordem importa, devendo percorrer todas as possibilidades dos laços de decisão
	- Strategy apenas descolaria o bloco de decisão para outra classe
1º passo separar cada tipo de desconto em uma class especifica
2º ligar cada classe a outra em uma sequência de responsabilidades
3º Criar uma classe sem proximo membro garantindo a parada da aplicação
4º Garantindo que na classe de calculo só ocorrerá modificação quando novas regras de negócio forem adicionadas no processo

Redirecionamento sequencial para proximas classes, garantindo que um pedido passará por todas as possibilidades de desconto

Template Method 
	- Melhoria na chain of responsibility reorganizando o código para que não exista estrutura de decisões em cada classe especifica, apenas na mãe
	- Classe mãe passa a ser a única responsável pelas decisões e as suas classes filhas apenas executam mediante a condição
	- O padrão Template Method favorece o reaproveitamento de códigos comuns entre classes, evitando assim duplicações de códigos.
	- Método de template que faz parte do processo mas com a lógica delegada para as classes filhas, não conhecendo as regras do funcionamento

State
	- Alterações pontuais em um objeto mediante a um estado especifico
	- Objeto deve estar capacitado a ter seu estado alterado
	- Classe capaz de representar a situação mae de todas as outras situações
	- Proxima situação sobreescrita nas classes possiveis e mantidas como exceptions na classe mae 
	- Padrão irmão do strategy na ideia de reduzir quantidade de if else, mas baseado em um atributo de estado e suas transições

Command 
	- Orçamento finalizado - gerar pedido e executar algumas operações, enviar e-mail, salvar no banco de dados
	- Desvincular codigo do mecanismo de apresentação - dados / execução
	- Criar uma outra classe que possui os dados e a execução juntos, separando / escondendo da interação com o usuario
	- Implements Command -> A partir do polimorfismo chama as classes que utilizam a interface e solicitam a execução
	- Command Handler - Uma para os dados - Uma classe de execução com as dependencias
	- Em cada parte do projeto que será utilizado este comando precisará instanciar ambas as classes, garantindo um código mais organizado e com menos repetição

Observer
	- Logicas de execução de um command handler devem ser direcionadas para classes separadas
	- Separar lógicas em classes diferentes de ações contendo as lógicas
	- Número de dependencias crescerá constantemente para a classe handler a cada novo comando, a cada nova ação -> novo parametro no construtor
	- Utilizando o polimorfismo - interface em comum em todas as acoes
	- Construtor no Handler passando a lista de acoes
	- No metodo executar passar por cada ação executando-as - acoes.forEach( a -> a.executarAcao(pedido));
	- Na instanciação do Handler passar as acoes como: 
		Arrays.asList(
                        new SalvarPedidoNoBancoDeDados(),
                        new EnviarEmailPedido()
                )
	- Evento com diversos ouvintes que estão observando e ao ocorrer, são notificados e executam suas funções - reagindo adequadamente, reduzindo o acoplamento

Finalizando Design Patterns Comportamentais:
	1 - Orçamento: 
		Impostos diferentes utilizando Strategy
	2 - Descontos:
		Regras sequencias de possiveis descontos em um orçamento - Chain Resposibility
		Template Method - reaproveitamento de código em codigos repetidos no chain responsibility
	3 - Descontos Extras a partir de estados
		Padrão State em objetos que possuem um atributo mutável dependendo de onde está no processo
	4 - Pedido
		Geração de um pedido e execução de funções -> Command
		Separação de cada comando em classes diferentes que utilizam a mesma interface -> Observer, execução a cada novo evento