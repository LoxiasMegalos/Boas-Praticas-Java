Conhecendo os 5 principios e aplicando em um projeto - SOLID
Boas práticas de programaçãoe orientação a objetos
Código facil de manter e fácil de estender com o menor impacto possível

Curso - projeto de RH com funcionarios + funções do salário

Introdução:
- Princípios da orientação a objetos
- Coesão, Encapsulamento e Acoplamento

Coesão  - harmonia entre elementos
        - classe, atributos e métodos devem representar coisas em comum
        - classe com muitos atributos diversos e métodos que fogem da ideia da classe -> sinal de baixa coesão
        - classes não coesas - grandes demais, difícieis de manter, muitas linhas de código, difícil manutenção
        - classe direcionada com função bem definida que realiza o necessário da maneira mais clara possível

Encapsulamento - proteger / blindar uma classe contra atores externos, impedindo sua livre manipulação
	- Getters e Setters muitas vezes nao sao necessários
	- Capacidade de incluir validações no código para garantir que uma aplicação estará funcionando de maneira adequada
	- Caso regras de negócio estejam sendo violadas - o encapsulamento de uma classe deve ser revisado

Acoplamento - componentes interligados entre si onde ocorre dependencia
	- Acoplamento está sempre presente - mas é sempre necessário avaliar a força dessa dependencia
	- Quando há um alto acoplamento -> o código de uma determinada classe é muito utilizado e manipulado em outra classe
	- Classes acopladas - fragilidade no código da aplicação, uma alteração em uma classe impacta no funcionamento de outras

Ao seguir esses princípios da orientação a objetos - código mais simples e mais fácil de dar manutenção

Classe Funcionario - representar o conceito de um funcionario no dominio da aplicação
- Regra de negócio no reajuste salarial 
- Vaidação realizada na própria classe de funcionário que poderia estar separado - aumentando a coesão
- Refatoração para adicionar um serviço responsável por garantir uma funcionalidade extraída de um classe

Single Responsibility Principle - Uma classe deveria ter apenas um único motivo para mudar.
- Adições a funcionalidades do código não devem ser motivo de alterar funcionário
- coesão no código garante que uma classe só será modificada quando houver uma necessidade de alterar sua representação.
- ReajusteService passará a ser modificada sempre que uma nova regra de negócio entrar em vigor
- coesão pode acarretar na perda de encapsulamento

Coesão melhorada a partir da adição de uma classe externa de validação

Nova regra de negócio - reajustes devem ser periodicos - mínimo de 6 meses até receber um novo reajuste

Reajustes serçao tratados na ReajusteService
- obter a data atual
- obter a data do ultimo reajuste
- verificar a diferença de meses a partir de ChronoUnit.Months.Betweeen

Separar cada validação Unica em uma classe separada
Classes com o mesmo metodo - interface - implementarao a classe mae
Incluir no Service - List de ValidacaoReajuste e no metodo de reajustar salario utlizar um forEach passando por todas as validações possíveis com os parametros funcionario e aumento
Qualquer nova validação que surgir é possível facilmente estender o código

Princípio open-closed - aberto fechado
Não há a necessidade de adicionar um novo código na mesma classe a cada nova regra de validação
- Entidades de software deveriam estar sempre abertas para extensão, mas, fechadas para modificações
- Modificando o código apenas quando há mudanças na regra de negócio

Promover um funcionario - nova funcionalidade no sistema
- classe PromocaoService
- com a regra de negocio, impedir que o gerente seja promovido
- a promoção estando ok, avaliar qual será o proximo cargo e alterar
- avaliar funcionarios terceiros - classe Terceirizado - extends Funcionario
	- Herança embora permita o reaproveitamento de código - garante premissas do pertencimento de uma classe - é um
	- A Herança toda faz sentido? No projeto, terceiros poderiam ser promovidos e ter seus salarios ajustados - falha
	- Soluções: Reescrever em terceirizado os metodos de promover e reajustar salario, nao fazendo nada ou lançando exception
	- Utilizar Composição ao invés de herança

Princípio de Substituição de Liskov - ao utilizar herança, embora 2 abstrações sejam semelhantes elas podem não ser dependentes
- Q(x) é uma propriedade dos objetos x de T
- Ao utilizar herança e certos métodos não fizerem sentido na classe herdada - princípio de Liskov estaria sendo ferido - aplicação inconsistente
- Em java - priorizar a composição

D - Inversão de dependência
Reajuste Service -> 2 validações feitas através de um lambda
Acoplamento com uma interface de validações - nova validação? Criar apenas uma nova classe implementando a interface
Establidade do código a partir da dependencia com interfaces - estáticas - pouca ou nenhuma mudança com o desenvolvimento do código

Lampada - não é diretamente na tomada - utilização de outros equipamentos
* Abstrações não devem depender de uma implementação
* Implementações devem depender de abstrações

Letra O - acaba carregando os principios S e D, SOD

I - Interface Segregation Principle 
Varias classes implementam uma interface única 
Uma classe não deveria ser forçada a depender de métodos que não utilizará
* Criar mais interfaces
* Fazer com que uma interface mais específica herde de uma interface mais genérica

Single Responsibility Principle - código na classe apenas que será necessário
Open Closed Principle - limitar modificações a regras de negócio - classes devem estar prontas para serem estendidas
Liskov Substitution Principle - Avaliar sempre a necessidade de composição ao invés de herança
Interface Segregation Principle - Interfaces bem planejadas para evitar métodos sem utilidade
Dependency Inversion Principle - fazer com que as abstrações não dependam de implementações e sim o contrário

